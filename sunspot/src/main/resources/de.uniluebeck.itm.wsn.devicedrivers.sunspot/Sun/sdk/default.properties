# Copyright © 2006 Sun Microsystems, Inc. All rights reserved. 
# 
# Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product that is
# described in this document. In particular, and without limitation, these intellectual property rights may
# include one or more of the U.S. patents listed at http://www.sun.com/patents and one or more additional patents
# or pending patent applications in the U.S. and in other countries.
# 
# U.S. Government Rights - Commercial software. Government users are subject to the Sun Microsystems, Inc.
# standard license agreement and applicable provisions of the FAR and its supplements.
# 
# Use is subject to license terms. 
# 
# This distribution may include materials developed by third parties.Sun, Sun Microsystems, the Sun logo and
# Java are trademarks or registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. 
# 
# Copyright © 2006 Sun Microsystems, Inc. Tous droits réservés.
# 
# Sun Microsystems, Inc. détient les droits de propriété intellectuels relatifs à la technologie incorporée dans
# le produit qui est décrit dans ce document. En particulier, et ce sans limitation, ces droits de propriété
# intellectuelle peuvent inclure un ou plus des brevets américains listés à l'adresse http://www.sun.com/patents
# et un ou les brevets supplémentaires ou les applications de brevet en attente aux Etats - Unis et dans les
# autres pays.
# 
# L'utilisation est soumise aux termes du contrat de licence.
# 
# Cette distribution peut comprendre des composants développés par des tierces parties.
# Sun, Sun Microsystems, le logo Sun et Java sont des marques de fabrique ou des marques déposées de Sun
# Microsystems, Inc. aux Etats-Unis et dans d'autres pays.
#
#
# default.properties
#
# This file contains the default set of properties used by the
# spot-development-kit's master build script, and an explanation of their uses.
# You may override these properties inside your own user.properties file, or
# inside your build.xml file.
#
# Remember though, that properties in ant are immutable.  That is, to override
# a property, you must set it *first*, not last.
#
# The most important property that must be set is sunspot.home.  Normally, this
# is set in ${user.home}/.sunspot.properties by the installer.  However, if for
# any reason this is the not the case, you must set this property yourself --
# before importing this file!  (NOTE: This file is imported by the master build
# file, so you must ensure that sunspot.home is set before import the master
# build file).
#
# e.g.  sunspot.home=/opt/sunspot
#

#
#
# Directories
#
# src.dir       is where your source files live
# resources.dir is where the resources to be included in the suite are placed
# build.dir     is where compiled sources are placed
#               (this directory will be created and removed)
# suite.dir     is where generated suites and bin files are placed
#               (this directory will be created and removed)
# preverify.dir is where the preverify classes are placed
#               (this directory will be created and removed)
# image.name    is the name given to generated images
#
src.dir=src
resources.dir=resources
build.dir=build
suite.dir=suite
preverify.dir=j2meclasses
image.name=image

# pattern of source files to include in and exclude from "ant compile" &  "ant host-compile"
spot.javac.include.src=**/*.java
spot.javac.exclude.src=
host.javac.include.src=**/*.java
host.javac.exclude.src=

#
# sunspot binaries & libraries
#
# NOTE: We also use ${user.classpath} when compiling applications.
# user.classpath=
#
# Define the default name and path for the Spot library suite
spot.library.name=transducerlib
spot.library.path=${sunspot.arm}
spot.library.addin.jars=${sunspot.lib}/multihop_common.jar${path.separator}\
 ${sunspot.lib}/transducer_device.jar
spot.library.base.jars=${sunspot.lib}/spotlib_device.jar${path.separator}${sunspot.lib}/spotlib_common.jar

sunspot.lib=${sunspot.home}/lib
sunspot.arm=${sunspot.home}/arm
sunspot.bin=${sunspot.home}/bin
sunspot.bootclasspath=${sunspot.lib}/squawk_device.jar
sunspot.classpath=${user.classpath}${path.separator}${spot.library.addin.jars}${path.separator}${spot.library.base.jars}
squawk.suite=${sunspot.bin}/squawk.suite
translator.suite=${sunspot.bin}/translator.suite
squawk.executable=${sunspot.bin}/squawk

# Path to the ARM binary for the main executable
executable.path=${sunspot.arm}/vm-spot.bin

#
# This is a convenience variable to be used by IDEs/editors only.  It contains
# the full classpath used by applications (for code completion purposes!).
# This should not be referred to in the build scripts.
#
sunspot.app.classpath=${sunspot.bootclasspath}${path.separator}${sunspot.classpath}${path.separator}${utility.jars}

#
# the environment classpath,
# We run the class jvmenv.
#
environment.classpath=${sunspot.bin}/squawk.jar

#
# preverify binary
#
preverify.executable=${sunspot.bin}/preverify

#
# the suite creator and converter
#
suitecreator.prefixes=
romizer.classpath=${sunspot.bin}/romizer_classes.jar${path.separator}\
 ${sunspot.bin}/squawk.jar${path.separator}${sunspot.bin}/squawk_device_classes.jar${path.separator}\
 ${sunspot.bin}/translator_classes.jar

#
# host side java version
#
host.java.version=1.5

#
# host side classpaths
#
host.addin.jars=${sunspot.lib}/multihop_common.jar
hostagent.compile.classpath=${user.classpath}${path.separator}\
 ${host.addin.jars}${path.separator}${sunspot.lib}/spotlib_host.jar${path.separator}\
 ${sunspot.lib}/spotlib_common.jar${path.separator}${sunspot.lib}/squawk_common.jar${path.separator}\
 ${sunspot.lib}/RXTXcomm.jar${path.separator}${spotclient.extra.classpath}
hostagent.base.run.classpath=${host.addin.jars}${path.separator}\
 ${sunspot.lib}/spotlib_host.jar${path.separator}${sunspot.lib}/spotlib_common.jar${path.separator}\
 ${sunspot.lib}/squawk_common.jar${path.separator}${sunspot.lib}/RXTXcomm.jar${path.separator}\
 ${spotclient.extra.classpath}
hostagent.run.classpath=${user.classpath}${path.separator}${hostagent.base.run.classpath}

# Basestation sharing
# basestation.shared=false

#
# spot client libraries, settings & scripts
#

# comma-separated list of ant .xml files containing user extensions
user.import.paths=
user.help.targets=
user.all.help.targets=${user.help.targets}

spotclient.addin.classes=
spotclient.addin.jars=
spotclient.all.addin.classes=${spotclient.addin.classes}
spotclient.extra.classpath=${sunspot.lib}/spotclient_host.jar${path.separator}\
 ${sunspot.lib}/signing_host.jar${path.separator}${spotclient.addin.jars}	
spotclient.classpath=${hostagent.base.run.classpath}
spotclient.sysBin.dir=${sunspot.arm}
spotclient.libFile=${spot.library.path}/${spot.library.name}
spotclient.keyStore.dir=${user.home}/sunspotkeystore
# Hello now takes three arguments: timeout, max hops (0 means use default) 
# and a destination (i.e. one can now look for a specific SPOT). The
# destination is a dotted hex IEEE address or the string 'broadcast'
spotclient.hello.timeout=1000
spotclient.hello.hops=0
spotclient.hello.destination=broadcast
# the port for echo from the master isolate (c.f. ISpotClientConstants)
master.echo.port=12
#spotclient.verbose=true
error.log=
debugclient.classpath=

#
# spotselector and spotfinder
#
spotfinder.executable=${sunspot.bin}/spotfinder
spotselector.classpath=${sunspot.bin}/spotselector.jar

#
# Properties for the debug proxy
#
# classpath used to run the SDP itself
proxy.bootclasspath=${sunspot.bin}/debuggerproxylauncher.jar${path.separator}\
 ${sunspot.bin}/romizer_classes.jar${path.separator}${sunspot.bin}/hosted-support_classes.jar${path.separator}\
 ${sunspot.bin}/debugger-proxy_classes.jar${path.separator}${sunspot.bin}/translator_classes.jar${path.separator}\
 ${sunspot.lib}/spotclient_host.jar${path.separator}${sunspot.lib}/signing_host.jar${path.separator}\
 ${hostagent.base.run.classpath}${path.separator}${sunspot.bin}/squawk_device_classes.jar
 
# classpath used by the SDP to find the classes of the application
proxy.classpath=j2meclasses;${sunspot.classpath};${sunspot.bin}/squawk_device_classes.jar
proxy.loglevel=none
debugger.port=9
# the port for echo from the child isolate (c.f. ISpotClientConstants)
proxy.echo.port=13

#
# Properties for the socket proxy
# socketproxy.loglevel can vary between: system, error, warning, info, io
#   where system is the less verbose and io is the most verbose
#   please note that the log level is only used under headless mode.
#
socketproxy.classpath=${sunspot.lib}/socket_proxy_host.jar
socketproxy.initport=10
socketproxy.loglevel=error

#
# Default channel, pan id and transmit power for remote deploy, run, etc
#
default.remote.channel=26
default.remote.pan.id=3
default.remote.transmit.power=0

#
# The user is expected to set a serial number for flashing their devices.
#
# serial.number=n
#

#
# the user's properties file
# This is not useful, since all these properties are immutable,
# the user's properties file has already been read.  You must
# set this value *before* you import the master build file in
# order to use a user.properties file.  It is only here in order
# to assert the properties existence and function.
#
# e.g.
#   <property name="user.properties.file" value="user.properties"/>
#   <import file="${sunspot.home}/build.xml"/>
#
user.properties.file=build.properties

#
# the user's external classpath
# (see note above)
#
user.classpath=
utility.jars=

#
# the user's library.path to add to the java.library.path
#
user.library.path=

#
# The default port - the value can also be set on the command line
# using: -Dport=<port>
# 
#port=port.not.set

#
# squawk startup parameters, used to set the SPOT startup
#

# Number of bytes available for allocation to DMA buffers
dma.region.size=1024

# Override in build.properties or .sunspot.properties to pass arguments to squawk (e.g -DmySystemProperty=someValue)
user.squawk.startup.arguments=
# if you change the next three lines, don't forget to also change ConfigPage.java and FlashFile.java
# You can specify the amount of RAM to be allocated to Squawk using e.g. -Xmx:478000. Note that the meaning of this
# argument on the SPOT is different from Squawk on the desktop: on the SPOT it is the total amount of memory available
# to Sqauwk for all purposes, whereas on the desktop it represents just the size of the object heap.
squawk.startup.arguments=-Xboot:268763136 -Xmxnvm:0 -isolateinit:com.sun.spot.peripheral.Spot -dma:${dma.region.size} ${user.squawk.startup.arguments}
library.suite.url=spotsuite://library
midlet=1

#
# the host application's main class and arguments
# (for building as a host application - NOT for building
# a suite to be deployed onto a SunSpot)
#
main.class=squawk.application.Startup
main.args=
host.jvmargs=
spot.log.connections=true
spot.mesh.route.logging=false

#
# For SPOTWorld
#
spotworld.squawk.classpath=${sunspot.bin}/squawk.jar
spotworld.classpath=${sunspot.lib}/spotworld_host.jar
spotworld.classname=com.sun.spots.Startup
spotworld.standalone.classname=com.sun.spots.multiThreadedServer.MetaIsolate
spotworld.port=20564
spotworld.server.url=serversocket://:${spotworld.port}

